Props and State are used to Control and Manipulate 
How Components behave and Render.

# What is JSX or Javascript XML
  JSX is a syntax extention for Javascript that lets you write HTML-like makekup inside a javascript file.

 - Rules to write jSX
    1 - return a single root element
    e.g.
      using Fragments:- <></>  
      using div or any tag with closing:- <div></div>

    2 - it should be camelCase

--------------------------------

# What is the Virtual DOM, and how does React use it to improve performance?
 - The Virtual DOM is a lightweight in-memory representation of the actual DOM.
 Virtual DOM does only the changes that are made in te code are made to reflect in the original DOM

 # What are react Lifecycle methods, and when are try used?
  - React lifecycle methods are special functions that provide granular level control to developers to hook into specific points in a component's life cycle

  to attache certain events to a components's lifecycle
    - Mounting
    - Updating
    - unmounting

     - Mounting
       - Constructor - Initialize state, bind method
       - getDerivedStatefromProps - Update state based on props before rendering
       - render - return JSX for the component
       - componentDidMount - perform sideeffect ( API calls )

     - Updating
        - getDerivedStatefromProps - Update state based on props during updates
        - shouldComponentUpdate - Decide if a re-render is necessary ?
        - render - return updated JSX for the component
        - getSnapshotbeforeUpdate - capture information before the DOM updates
        - componentDidMount - perform actions after the DOM updates
    - unmounting
       - componentWillUnmount - Clean up resources, event listeners, subscription will unmount


# explain the useState and useEffect hooks
  useState()
    - used to store the fetched data and the loading state

  useEffect()
    - used to fetch the data when the components mounts

=============================================================================

 # What are props
  - Props or Propertied are a way to pass data from parent component to a child component in react. child components cannot modify these values because these are read only.

  Props are immutable Object.
  props is controlled only by the parent component and can not be changed by the children.

  # What are state - 
   - State is a Mutable Object that stores Dynamic Data.
  STATE IS PRIVATE AND ITS FULLY CONTROLLED BY COMponent it belongs to

 
 # what is props drilling ?
  - Props drilling is when data has to be passed down through many layers of components


 # What is Context API, And how it is used for state management ?
  - The context API in React is a feature that allows you to manage and share state or data globally across a component tree, without needing to pass props manually at every single level.

  import - createContext, useState

  # What is HOC - Higher order components
 - it is a function that takes a component as an input and returns a new component with additional functionality or modified behavior

# react Router 
    - npm i react-router-dom
    import { BrowserRouter as Router, Route, Routes, Link }


=========================

# What is Redux in React?

Redux is a predictable state container for JavaScript applications, commonly used with React to manage the state of the application efficiently. It helps in maintaining the state of the application in a single store, making it easier to manage and debug.

Key Concepts of Redux

Store

The Redux store is the central repository that holds the state of the entire application. It acts as a single source of truth, ensuring that all components have access to the same state. The store is created using the createStore function and is provided to the React application using the <Provider> component from react-redux.

import { createStore } from 'redux';
import { Provider } from 'react-redux';
import rootReducer from './reducers';

Reducers
Reducers are pure functions that take the current state and an action as arguments and return a new state. They specify how the state changes in response to an action. Reducers must be pure, meaning they should not modify the existing state but return a new state object.

Actions
Actions are plain JavaScript objects that describe what happened in the application. They are the only way to send data from the application to the Redux store. Actions must have a type property that indicates the type of action being performed.
